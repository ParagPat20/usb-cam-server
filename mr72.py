import serial
import time

# CRC8 table from your protocol
CRC8_TABLE = [
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
]

def crc8(buffer):
    crc = 0x0
    for b in buffer:
        i = (crc ^ b) & 0xFF
        crc = (CRC8_TABLE[i] ^ (crc << 8)) & 0xFF
    return crc & 0xFF

def parse_frame(frame):
    # frame: 19 bytes, [0:2]=header, [2:18]=data, [18]=crc
    if frame[0] != 0x54 or frame[1] != 0x48:
        return None, "Header mismatch"
    if crc8(frame[:18]) != frame[18]:
        return None, "CRC error"
    # Each data field is 2 bytes, big endian
    fields = [int.from_bytes(frame[2+i*2:4+i*2], 'big') for i in range(8)]
    # Map to names
    data = {
        "sector2_nearest": fields[0],
        "sector3_nearest": fields[1],
        "sector_90": fields[2],
        "sector_135": fields[3],
        "sector_180": fields[4],
        "sector_225": fields[5],
        "sector_270": fields[6],
        "sector1_nearest": fields[7],
    }
    # Replace 0xFFFF with None for invalid data
    for k in data:
        if data[k] == 0xFFFF:
            data[k] = None
    return data, None

def parse_and_print(frame):
    if frame[0] != 0x54 or frame[1] != 0x48:
        print("Header mismatch")
        return
    calculated_crc_full = crc8(frame[:18])
    calculated_crc_data = crc8(frame[2:18])
    calculated_crc_0_17 = crc8(frame[:17])
    frame_crc = frame[18]
    print(f"CRC8 full: {hex(calculated_crc_full)}, CRC8 data: {hex(calculated_crc_data)}, CRC8 0-17: {hex(calculated_crc_0_17)}, CRC8 from frame: {hex(frame_crc)}")
    if calculated_crc_full != frame_crc:
        print("CRC error")
        return
    fields = [int.from_bytes(frame[2+i*2:4+i*2], 'big') for i in range(8)]
    names = [
        "sector2_nearest", "sector3_nearest", "sector_90", "sector_135",
        "sector_180", "sector_225", "sector_270", "sector1_nearest"
    ]
    data = {}
    for name, value in zip(names, fields):
        data[name] = None if value == 0xFFFF else value
    print("MR72 Data:", data)

def main():
    ser = serial.Serial('/dev/ttyS0', 115200, timeout=1)
    print("Listening for MR72 frames (distance only)...")
    while True:
        frame = ser.read(19)
        if len(frame) != 19:
            print("Incomplete frame")
            continue
        # D1: bytes 2-3, D2: bytes 4-5, D8: bytes 16-17
        d1 = int.from_bytes(frame[2:4], 'big')
        d2 = int.from_bytes(frame[4:6], 'big')
        d8 = int.from_bytes(frame[16:18], 'big')
        d1 = None if d1 == 0xFFFF else d1
        d2 = None if d2 == 0xFFFF else d2
        d8 = None if d8 == 0xFFFF else d8
        print(f"D1 (Sector 2): {d1}, D2 (Sector 3): {d2}, D8 (Sector 1): {d8}")
        time.sleep(1)

if __name__ == "__main__":
    main()